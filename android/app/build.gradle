plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def buildVersionCode = {
    def (major, minor, patch) = flutterVersionName.tokenize('.')
    def code = flutterVersionCode
    (major, minor, patch, code) = [major, minor, patch, code].collect{it.toInteger()}
    if (major >= 21) { throw new GradleException("Major version cannot exceed 20") }
    if (minor >= 100) { throw new GradleException("Minor version cannot exceed 99") }
    if (patch >= 100) { throw new GradleException("Patch version cannot exceed 99") }
    if (code >= 10000) { throw new GradleException("Build number cannot exceed 9999") }
    (major * 100000000) + (minor * 1000000) + (patch * 10000) + code;
}

android {
    compileSdkVersion 34

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "dev.twinsun.my_awesome_app"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode buildVersionCode()
        versionName flutterVersionName
        multiDexEnabled true
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }

    lintOptions {
        checkReleaseBuilds false
    }
    namespace 'dev.twinsun.my_awesome_app'
}

flutter {
    source '../..'
}

dependencies {
}
