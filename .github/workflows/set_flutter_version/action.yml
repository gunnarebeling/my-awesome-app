name: Set Flutter Version
description: Sets the specific Flutter version using FVM based on the .fvmrc file
runs:
  using: composite
  steps:
    - name: Allow storing Flutter SDK
      shell: bash
      run: |
        git config --global --add safe.directory /home/flutter/flutter-sdk

    - name: Add FVM to current shell for immediate usage
      shell: bash
      run: |
        fvm_path="$HOME/.pub-cache/bin"
        export PATH="$PATH:$fvm_path"
        echo "$fvm_path" >> $GITHUB_PATH

    - name: Get Flutter version from .fvmrc
      shell: bash
      run: |
        file=".fvmrc"

        # If file does not exist
        if [[ ! -f "$file" ]]; then
          echo "Error: .fvmrc file not found"
          exit 1
        fi

        # This regex returns whatever value is between the next set of quotes after the flutter keyword
        version=$(sed -n 's/.*"flutter": *"\([^"]*\)".*/\1/p' "$file")

        # If version is an empty string
        if [[ -z "${version:-}" ]]; then
          echo "Error: Unable to parse Flutter version from $file"
          exit 1
        fi

        echo "FLUTTER_VERSION=$version" >> $GITHUB_ENV

    - name: Set Flutter version
      shell: bash
      run: |
          # If fvm is not installed or is unavailable
          if ! command -v fvm &> /dev/null; then
            echo "fvm not found. Installing fvm..."
            dart pub global activate fvm || { echo "fvm installation failed"; exit 1; }
          fi

          echo "Setting Flutter version to $FLUTTER_VERSION using fvm..."
          fvm install "$FLUTTER_VERSION" || { echo "fvm install failed for version $version"; exit 1; }
          fvm use "$FLUTTER_VERSION" || { echo "fvm use failed for version $version"; exit 1; }
